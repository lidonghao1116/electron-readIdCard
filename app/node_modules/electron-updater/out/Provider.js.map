{"version":3,"file":"Provider.js","sourceRoot":"","sources":["../src/Provider.ts"],"names":[],"mappings":";;;;;;;;;AAAA,AAAO,AAAmC,AAAiB,AAA8C,AAAM,AAAsB;;;;;;AAGrI,AAAO,AAAY,AAAmB,AAAE,AAAM,AAAQ,AAEtD,AAAM;;;;;AAGJ,gBAA+B,AAA2B;AAA3B,aAAQ,WAAR,AAAQ,AAAmB,AAC1D;AAAC;AAED,AAAiB,sBAAC,AAAiC;AACjD,AAAI,aAAC,AAAc,iBAAG,AAAK,AAC7B;AAAC;AAMD,AAAM,WAAC,AAAkB,mBAAC,AAAgB;AACxC,AAAE,AAAC,YAAC,AAAmB,AAAE,AAAC,oDAAC,AAAC;AAC1B,AAAE,AAAC,gBAAE,AAAY,KAAC,AAAG,OAAI,AAAI,AAAC,MAAC,AAAC;AAC9B,sBAAM,IAAI,AAAK,MAAC,AAAiC,AAAC,AACpD;AAAC;AACD,AAAM,AACR;AAAC;AAED,AAAmC;AACnC,AAAE,AAAC,YAAE,AAA0B,KAAC,AAAI,QAAI,AAAI,QAAI,AAAI,KAAC,AAAM,UAAI,AAAI,AAAC,MAAC,AAAC;AACpE,kBAAM,IAAI,AAAK,AAAC,yEAAmE,AAAiB,2EAAC,AAAI,AAAC,KAAE,AAAC,AAC/G;AAAC;AACD,AAAE,AAAC,YAAC,AAAI,KAAC,AAAI,QAAI,AAAI,AAAC,MAAC,AAAC;AACtB,kBAAM,IAAI,AAAK,AAAC,gDAA0C,AAAiB,2EAAC,AAAI,AAAC,KAAE,AAAC,AACtF;AAAC,AACH;AAAC;AAES,AAAW,gBAAC,AAAQ,KAAE,AAAmC,SAAE,AAAoC;AACvG,AAAM,eAAC,AAAI,KAAC,AAAQ,SAAC,AAAO,QAAC,AAAI,KAAC,AAAoB,qBAAC,AAAG,KAAE,AAAO,AAAC,UAAE,AAAiB,AAAC,AAC1F;AAAC;AAES,AAAoB,yBAAC,AAAQ,KAAE,AAAoC;AAC3E,cAAM,AAAM,SAAmB,AAAE;AACjC,AAAE,AAAC,YAAC,AAAI,KAAC,AAAc,kBAAI,AAAI,AAAC,MAAC,AAAC;AAChC,AAAE,AAAC,gBAAC,AAAO,WAAI,AAAI,AAAC,MAAC,AAAC;AACpB,AAAM,uBAAC,AAAO,UAAG,AAAO,AAC1B;AAAC,AACH;AAAC,AACD,AAAI,eAAC,AAAC;AACJ,AAAM,mBAAC,AAAO,UAAG,AAAO,WAAI,AAAI,AAAC,AAAC,OAAC,AAAI,KAAC,AAAc,AAAC,AAAC,mCAAK,AAAI,KAAC,AAAc,gBAAK,AAAO,AAAC,AAC/F;AAAC;AAED,AAAM,eAAC,AAAQ,WAAG,AAAG,IAAC,AAAQ;AAC9B,AAAM,eAAC,AAAQ,WAAG,AAAG,IAAC,AAAQ;AAC9B,AAAE,AAAC,YAAC,AAAG,IAAC,AAAI,AAAC,MAAC,AAAC;AACb,AAAM,mBAAC,AAAI,OAAG,AAAG,IAAC,AAAI,AACxB;AAAC;AACD,AAAM,eAAC,AAAI,OAAG,AAAG,IAAC,AAAQ,WAAG,AAAG,IAAC,AAAM;AACvC,AAAM,eAAC,AAAM,AACf;AAAC,AACF","sourcesContent":["import { CancellationToken, HttpExecutor, safeStringifyJson, UpdateInfo, VersionInfo, WindowsUpdateInfo } from \"builder-util-runtime\"\nimport { OutgoingHttpHeaders, RequestOptions } from \"http\"\nimport { URL } from \"url\"\nimport { FileInfo, isUseOldMacProvider } from \"./main\"\n\nexport abstract class Provider<T extends VersionInfo> {\n  protected requestHeaders: OutgoingHttpHeaders | null\n\n  constructor(protected readonly executor: HttpExecutor<any>) {\n  }\n\n  setRequestHeaders(value: OutgoingHttpHeaders | null): void {\n    this.requestHeaders = value\n  }\n\n  abstract getLatestVersion(): Promise<T>\n\n  abstract getUpdateFile(versionInfo: T): Promise<FileInfo>\n\n  static validateUpdateInfo(info: UpdateInfo) {\n    if (isUseOldMacProvider()) {\n      if ((info as any).url == null) {\n        throw new Error(\"Update info doesn't contain url\")\n      }\n      return\n    }\n\n    // noinspection JSDeprecatedSymbols\n    if ((info as WindowsUpdateInfo).sha2 == null && info.sha512 == null) {\n      throw new Error(`Update info doesn't contain nor sha256 neither sha512 checksum: ${safeStringifyJson(info)}`)\n    }\n    if (info.path == null) {\n      throw new Error(`Update info doesn't contain file path: ${safeStringifyJson(info)}`)\n    }\n  }\n\n  protected httpRequest(url: URL, headers: OutgoingHttpHeaders | null, cancellationToken: CancellationToken) {\n    return this.executor.request(this.createRequestOptions(url, headers), cancellationToken)\n  }\n\n  protected createRequestOptions(url: URL, headers?: OutgoingHttpHeaders | null): RequestOptions {\n    const result: RequestOptions = {}\n    if (this.requestHeaders == null) {\n      if (headers != null) {\n        result.headers = headers\n      }\n    }\n    else {\n      result.headers = headers == null ? this.requestHeaders : {...this.requestHeaders, ...headers}\n    }\n\n    result.protocol = url.protocol\n    result.hostname = url.hostname\n    if (url.port) {\n      result.port = url.port\n    }\n    result.path = url.pathname + url.search\n    return result\n  }\n}\n"]}
