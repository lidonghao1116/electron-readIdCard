{"version":3,"file":"GenericProvider.js","sourceRoot":"","sources":["../src/GenericProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import { GenericServerOptions, HttpError, HttpExecutor, UpdateInfo, WindowsUpdateInfo } from \"builder-util-runtime\"\nimport { RequestOptions } from \"http\"\nimport { safeLoad } from \"js-yaml\"\nimport * as path from \"path\"\nimport { FileInfo, getChannelFilename, getCustomChannelName, getDefaultChannelName, isUseOldMacProvider, newBaseUrl, newUrlFromBase, Provider } from \"./main\"\n\nexport class GenericProvider extends Provider<UpdateInfo> {\n  private readonly baseUrl = newBaseUrl(this.configuration.url)\n  private readonly channel = this.configuration.channel ? getCustomChannelName(this.configuration.channel) : getDefaultChannelName()\n\n  constructor(private readonly configuration: GenericServerOptions, executor: HttpExecutor<any>) {\n    super(executor)\n  }\n\n  async getLatestVersion(): Promise<UpdateInfo> {\n    let result: UpdateInfo\n    const channelFile = getChannelFilename(this.channel)\n    const channelUrl = newUrlFromBase(channelFile, this.baseUrl)\n    try {\n      const options: RequestOptions = {\n        hostname: channelUrl.hostname,\n        path: `${channelUrl.pathname}${channelUrl.search}`,\n        protocol: channelUrl.protocol,\n        headers: this.requestHeaders || undefined,\n      }\n      if (channelUrl.port != null) {\n        options.port = channelUrl.port\n      }\n      result = safeLoad((await this.executor.request(options))!!)\n    }\n    catch (e) {\n      if (e instanceof HttpError && e.response.statusCode === 404) {\n        throw new Error(`Cannot find channel \"${channelFile}\" update info: ${e.stack || e.message}`)\n      }\n      throw e\n    }\n\n    Provider.validateUpdateInfo(result)\n    if (isUseOldMacProvider()) {\n      (result as any).releaseJsonUrl = channelUrl.href\n    }\n    return result\n  }\n\n  async getUpdateFile(versionInfo: UpdateInfo): Promise<FileInfo> {\n    if (isUseOldMacProvider()) {\n      return versionInfo as any\n    }\n\n    const filePath = versionInfo.path\n    const result: FileInfo = {\n      name: path.posix.basename(filePath),\n      url: newUrlFromBase(filePath, this.baseUrl).href,\n      sha512: versionInfo.sha512,\n    }\n\n    const packages = (versionInfo as WindowsUpdateInfo).packages\n    const packageInfo = packages == null ? null : (packages[process.arch] || packages.ia32)\n    if (packageInfo != null) {\n      result.packageInfo = {\n        ...packageInfo,\n        // .file - backward compatibility\n        path: newUrlFromBase(packageInfo.path || (packageInfo as any).file, this.baseUrl).href,\n      }\n    }\n    return result\n  }\n}"]}
